"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.callback_data import NavigationCallback, OrderCallback, ItemCallback
from utils.data_manager import data_manager
from keyboards.navigation_keyboards import back_to_main_keyboard
from config import EMOJI

router = Router()

@router.callback_query(NavigationCallback.filter(F.action == "order"))
async def show_order(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑"""
    user_id = callback.from_user.id
    order = data_manager.get_order(user_id)
    order_items = data_manager.get_order_items_list(user_id)

    if not order_items:
        text = f"""
{EMOJI['cart']} <b>–ú–æ–π –∑–∞–∫–∞–∑</b>

–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç.
–î–æ–±–∞–≤–ª—è–π—Ç–µ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é!
"""
        await callback.message.edit_text(
            text,
            reply_markup=back_to_main_keyboard()
        )
    else:
        text = f"{EMOJI['cart']} <b>–ú–æ–π –∑–∞–∫–∞–∑</b>\n\n"

        for i, item in enumerate(order_items, 1):
            emoji = item.get("image", "üçΩÔ∏è")
            name = item.get("name", "–ë–ª—é–¥–æ")
            quantity = item.get("quantity", 1)
            price = item.get("price", 0)
            subtotal = item.get("subtotal", 0)

            text += f"{i}. {emoji} {name}\n"
            text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} √ó {price}‚ÇΩ = {subtotal}‚ÇΩ\n\n"

        total = order.get("total", 0)
        text += f"üí∞ <b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
        builder = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        for item in order_items:
            emoji = item.get("image", "üçΩÔ∏è")
            name = item.get("name", "–ë–ª—é–¥–æ")
            item_id = item.get("id")

            builder.button(
                text=f"‚ûñ {emoji} {name}",
                callback_data=OrderCallback(action="remove", item_id=item_id)
            )
            builder.button(
                text=f"‚ûï {emoji} {name}",
                callback_data=OrderCallback(action="add", item_id=item_id)
            )

        builder.button(
            text=f"{EMOJI['confirm']} –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data=OrderCallback(action="confirm")
        )
        builder.button(
            text=f"{EMOJI['delete']} –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data=OrderCallback(action="clear")
        )
        builder.button(
            text=f"{EMOJI['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=NavigationCallback(action="main")
        )

        builder.adjust(2)

        await callback.message.edit_text(text, reply_markup=builder.as_markup())

    await callback.answer()

@router.callback_query(OrderCallback.filter(F.action == "add"))
async def add_to_order(callback: CallbackQuery, callback_data: OrderCallback):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑"""
    user_id = callback.from_user.id
    item_id = callback_data.item_id

    item = data_manager.get_item(item_id)
    if not item:
        await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    data_manager.add_to_order(user_id, item_id)

    name = item.get("name", "–ë–ª—é–¥–æ")
    await callback.answer(f"‚ûï {name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞
    if "–ú–æ–π –∑–∞–∫–∞–∑" in callback.message.text:
        await show_order(callback)

@router.callback_query(OrderCallback.filter(F.action == "remove"))
async def remove_from_order(callback: CallbackQuery, callback_data: OrderCallback):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    item_id = callback_data.item_id

    item = data_manager.get_item(item_id)
    if not item:
        await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    data_manager.remove_from_order(user_id, item_id)

    name = item.get("name", "–ë–ª—é–¥–æ")
    await callback.answer(f"‚ûñ {name} —É–±—Ä–∞–Ω–æ –∏–∑ –∑–∞–∫–∞–∑–∞")

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await show_order(callback)

@router.callback_query(OrderCallback.filter(F.action == "clear"))
async def clear_order(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑"""
    user_id = callback.from_user.id
    data_manager.clear_order(user_id)

    await callback.answer("üóëÔ∏è –ó–∞–∫–∞–∑ –æ—á–∏—â–µ–Ω")
    await show_order(callback)

@router.callback_query(OrderCallback.filter(F.action == "confirm"))
async def confirm_order(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"""
    user_id = callback.from_user.id
    order = data_manager.get_order(user_id)
    order_items = data_manager.get_order_items_list(user_id)

    if not order_items:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –ø—É—Å—Ç")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫
    receipt_text = f"üßæ <b>–ß–µ–∫ –∑–∞–∫–∞–∑–∞</b>\n\n"
    receipt_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.first_name or '–ö–ª–∏–µ–Ω—Ç'}\n"
    receipt_text += f"üÜî ID –∑–∞–∫–∞–∑–∞: {user_id}{len(order_items):03d}\n\n"

    for i, item in enumerate(order_items, 1):
        name = item.get("name", "–ë–ª—é–¥–æ")
        quantity = item.get("quantity", 1)
        price = item.get("price", 0)
        subtotal = item.get("subtotal", 0)

        receipt_text += f"{i}. {name}\n"
        receipt_text += f"   {quantity} √ó {price}‚ÇΩ = {subtotal}‚ÇΩ\n"

    total = order.get("total", 0)
    receipt_text += f"\nüí∞ <b>–ö –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ</b>\n\n"
    receipt_text += "‚úÖ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n"
    receipt_text += "‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 15-30 –º–∏–Ω—É—Ç\n"
    receipt_text += "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"

    # –û—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    data_manager.clear_order(user_id)

    await callback.message.edit_text(
        receipt_text,
        reply_markup=back_to_main_keyboard()
    )
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–ª—é–¥–∞
@router.callback_query(ItemCallback.filter(F.action == "view"))
async def view_item(callback: CallbackQuery, callback_data: ItemCallback):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –±–ª—é–¥–∞"""
    item_id = callback_data.item_id
    user_id = callback.from_user.id
    page = callback_data.page

    item = data_manager.get_item(item_id)
    if not item:
        await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    emoji = item.get("image", "üçΩÔ∏è")
    name = item.get("name", "–ë–ª—é–¥–æ")
    description = item.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    price = item.get("price", 0)
    ingredients = item.get("ingredients", [])

    text = f"{emoji} <b>{name}</b>\n\n"
    text += f"üìã {description}\n\n"
    text += f"üí∞ –¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>\n\n"

    if ingredients:
        text += f"üçΩÔ∏è –°–æ—Å—Ç–∞–≤: {', '.join(ingredients)}"

    from keyboards.menu_keyboards import item_keyboard
    keyboard = item_keyboard(item_id, user_id, page)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(ItemCallback.filter(F.action == "back"))
async def back_from_item(callback: CallbackQuery, callback_data: ItemCallback):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–ª—é–¥–∞"""
    # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    from utils.callback_data import NavigationCallback

    back_callback = NavigationCallback(action="main")
    await callback.message.edit_text(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=back_to_main_keyboard()
    )
    await callback.answer()
