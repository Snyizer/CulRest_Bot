"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.callback_data import NavigationCallback, FavoritesCallback, ItemCallback
from utils.data_manager import data_manager
from keyboards.navigation_keyboards import back_to_main_keyboard
from config import EMOJI, MAX_ITEMS_PER_PAGE

router = Router()

@router.callback_query(NavigationCallback.filter(F.action == "favorites"))
async def show_favorites(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞"""
    user_id = callback.from_user.id
    favorites = data_manager.get_user_favorites(user_id)

    if not favorites:
        text = f"""
{EMOJI['favorites']} <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥.
–î–æ–±–∞–≤–ª—è–π—Ç–µ –±–ª—é–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é!
"""
        await callback.message.edit_text(
            text,
            reply_markup=back_to_main_keyboard()
        )
    else:
        await show_favorites_page(callback, favorites, 0)

    await callback.answer()

@router.callback_query(FavoritesCallback.filter(F.action == "page"))
async def show_favorites_page_callback(callback: CallbackQuery, callback_data: FavoritesCallback):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_id = callback.from_user.id
    favorites = data_manager.get_user_favorites(user_id)
    page = callback_data.page

    await show_favorites_page(callback, favorites, page)
    await callback.answer()

async def show_favorites_page(callback: CallbackQuery, favorites: list, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    builder = InlineKeyboardBuilder()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_idx = page * MAX_ITEMS_PER_PAGE
    end_idx = start_idx + MAX_ITEMS_PER_PAGE
    page_favorites = favorites[start_idx:end_idx]

    text = f"{EMOJI['favorites']} <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ ({len(favorites)} –±–ª—é–¥)</b>\n\n"

    for i, item in enumerate(page_favorites, start_idx + 1):
        emoji = item.get("image", "üçΩÔ∏è")
        name = item.get("name", "–ë–ª—é–¥–æ")
        price = item.get("price", 0)

        text += f"{i}. {emoji} {name} - {price}‚ÇΩ\n"

        builder.button(
            text=f"{emoji} {name}",
            callback_data=ItemCallback(action="view", item_id=item["id"], page=page)
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (len(favorites) + MAX_ITEMS_PER_PAGE - 1) // MAX_ITEMS_PER_PAGE
    if total_pages > 1:
        pagination_row = []

        if page > 0:
            pagination_row.append(
                builder.button(
                    text="‚óÄÔ∏è",
                    callback_data=FavoritesCallback(action="page", page=page - 1)
                )
            )

        pagination_row.append(
            builder.button(
                text=f"{page + 1}/{total_pages}",
                callback_data="ignore"
            )
        )

        if page < total_pages - 1:
            pagination_row.append(
                builder.button(
                    text="‚ñ∂Ô∏è", 
                    callback_data=FavoritesCallback(action="page", page=page + 1)
                )
            )

    builder.button(
        text=f"{EMOJI['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data=NavigationCallback(action="main")
    )

    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())

@router.callback_query(FavoritesCallback.filter(F.action == "add"))
async def add_to_favorites(callback: CallbackQuery, callback_data: FavoritesCallback):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    user_id = callback.from_user.id
    item_id = callback_data.item_id

    item = data_manager.get_item(item_id)
    if not item:
        await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    if data_manager.add_to_favorites(user_id, item_id):
        name = item.get("name", "–ë–ª—é–¥–æ")
        await callback.answer(f"‚≠ê {name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–ª—é–¥–∞
        page = callback_data.page
        from keyboards.menu_keyboards import item_keyboard
        new_keyboard = item_keyboard(item_id, user_id, page)
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)
    else:
        await callback.answer("‚ö†Ô∏è –ë–ª—é–¥–æ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

@router.callback_query(FavoritesCallback.filter(F.action == "remove"))
async def remove_from_favorites(callback: CallbackQuery, callback_data: FavoritesCallback):
    """–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_id = callback.from_user.id
    item_id = callback_data.item_id

    item = data_manager.get_item(item_id)
    if not item:
        await callback.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    if data_manager.remove_from_favorites(user_id, item_id):
        name = item.get("name", "–ë–ª—é–¥–æ")
        await callback.answer(f"üóëÔ∏è {name} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–ª—é–¥–∞
        page = callback_data.page
        from keyboards.menu_keyboards import item_keyboard
        new_keyboard = item_keyboard(item_id, user_id, page)
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)
    else:
        await callback.answer("‚ö†Ô∏è –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
